import getAllProjects from './getAllProjects';
import getSingleProject from './getSingleProject';
import updateAProject from './updateAProject';
import deleteAProject from './deleteAProject';
import activateAProject from './activateAProject';
import getAggProjectIssues from './getAggProjectIssues';
import getProjectDepGraph from './getProjectDepGraph';
declare const _default: {
    getAllProjects: typeof getAllProjects;
    getSingleProject: typeof getSingleProject;
    updateAProject: typeof updateAProject;
    deleteAProject: typeof deleteAProject;
    deactivateAProject: (orgId: string, projectId: string, opts?: import("../../types/types").RequestOpts) => Promise<import("../../types/types").ReturnData>;
    activateAProject: typeof activateAProject;
    getAggProjectIssues: typeof getAggProjectIssues;
    getProjectDepGraph: typeof getProjectDepGraph;
    listAllIgnores: (orgId: string, projectId: string, opts?: import("../../types/types").RequestOpts) => Promise<import("../../types/types").ReturnData>;
    retrieveIgnore: (orgId: string, projectId: string, issueId: string, opts?: import("../../types/types").RequestOpts) => Promise<import("../../types/types").ReturnData>;
    addIgnore: (orgId: string, projectId: string, issueId: string, opts?: import("../../types/types").RequestOpts) => Promise<import("../../types/types").ReturnData>;
    replaceIgnores: (orgId: string, projectId: string, ignoreId: string, opts?: import("../../types/types").RequestOpts) => Promise<import("../../types/types").ReturnData>;
    deleteIgnores: (orgId: string, projectId: string, ignoreId: string, opts?: import("../../types/types").RequestOpts) => Promise<import("../../types/types").ReturnData>;
    listAllJiraIssues: (orgId: string, projectId: string, opts?: import("../../types/types").RequestOpts) => Promise<import("../../types/types").ReturnData>;
    createJiraIssue: (orgId: string, projectId: string, issueId: string, opts?: import("../../types/types").RequestOpts) => Promise<import("../../types/types").ReturnData>;
    listProjectSettings: (orgId: string, projectId: string, opts?: import("../../types/types").RequestOpts) => Promise<import("../../types/types").ReturnData>;
    updateProjectSettings: (orgId: string, projectId: string, opts?: import("../../types/types").RequestOpts) => Promise<import("../../types/types").ReturnData>;
    deleteProjectSettings: (orgId: string, projectId: string, opts?: import("../../types/types").RequestOpts) => Promise<import("../../types/types").ReturnData>;
    moveProject: (orgId: string, projectId: string, opts?: import("../../types/types").RequestOpts) => Promise<import("../../types/types").ReturnData>;
    addATag: (orgId: string, projectId: string, opts?: import("../../types/types").RequestOpts) => Promise<import("../../types/types").ReturnData>;
    removeATag: (orgId: string, projectId: string, opts?: import("../../types/types").RequestOpts) => Promise<import("../../types/types").ReturnData>;
    applyAttributes: (orgId: string, projectId: string, opts?: import("../../types/types").RequestOpts) => Promise<import("../../types/types").ReturnData>;
};
export default _default;
