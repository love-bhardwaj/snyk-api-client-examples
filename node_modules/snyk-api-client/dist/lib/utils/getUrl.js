"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var getQueryString_1 = __importDefault(require("../utils/getQueryString"));
exports.default = {
    getUserDetails: function (userId) {
        return "user/" + userId;
    },
    getMyDetails: "user/me",
    getOrgNotiSettings: function (orgId) {
        return "user/me/notification-settings/org/" + orgId;
    },
    modOrgNotiSettings: function (orgId) {
        return "user/me/notification-settings/org/" + orgId;
    },
    getProjNotiSettings: function (orgId, projectId) {
        return "user/me/notification-settings/org/" + orgId + "/project/" + projectId;
    },
    modProjNotiSettings: function (orgId, projectId) {
        return "user/me/notification-settings/org/" + orgId + "/project/" + projectId;
    },
    getGroupSettings: function (groupId) {
        return "group/" + groupId + "/settings";
    },
    upGroupSeetings: function (groupId) {
        return "group/" + groupId + "/settings";
    },
    listGroupMembers: function (groupId) {
        return "group/" + groupId + "/members";
    },
    addMemGroupOrg: function (groupId, orgId) {
        return "group/" + groupId + "/org/" + orgId + "/members";
    },
    getGroupTags: function (groupId, pageSize, pageNo) {
        return "group/" + groupId + "/tags?perPage=" + pageSize + "&page=" + pageNo;
    },
    getAllProjects: function (orgId) {
        return "org/" + orgId + "/projects";
    },
    getSingleProject: function (orgId, projectId) {
        return "org/" + orgId + "/project/" + projectId;
    },
    updateProject: function (orgId, projectId) {
        return "org/" + orgId + "/project/" + projectId;
    },
    deleteProject: function (orgId, projectId) {
        return "org/" + orgId + "/project/" + projectId;
    },
    deactivateProject: function (orgId, projectId) {
        return "org/" + orgId + "/project/" + projectId + "/deactivate";
    },
    activateProject: function (orgId, projectId) {
        return "org/" + orgId + "/project/" + projectId + "/activate";
    },
    getAggIssues: function (orgId, projectId) {
        return "org/" + orgId + "/project/" + projectId + "/aggregated-issues";
    },
    getProjDepGraph: function (orgId, projectId) {
        return "org/" + orgId + "/project/" + projectId + "/dep-graph";
    },
    listAllIgnores: function (orgId, projectId) {
        return "org/" + orgId + "/project/" + projectId + "/ignores";
    },
    retrieveIgnore: function (orgId, projectId, issueId) {
        return "org/" + orgId + "/project/" + projectId + "/ignore/" + issueId;
    },
    addIgnore: function (orgId, projectId, issueId) {
        return "org/" + orgId + "/project/" + projectId + "/ignore/" + issueId;
    },
    replaceIgnores: function (orgId, projectId, issueId) {
        return "org/" + orgId + "/project/" + projectId + "/ignore/" + issueId;
    },
    deleteIgnore: function (orgId, projectId, issueId) {
        return "org/" + orgId + "/project/" + projectId + "/ignore/" + issueId;
    },
    listAllJiraIssues: function (orgId, projectId) {
        return "org/" + orgId + "/project/" + projectId + "/jira-issues";
    },
    createJiraIssue: function (orgId, projectId, issueId) {
        return "org/" + orgId + "/project/" + projectId + "/issue/" + issueId + "/jira-issue";
    },
    listProjectSettings: function (orgId, projectId) {
        return "org/" + orgId + "/project/" + projectId + "/settings";
    },
    updateProjectSettings: function (orgId, projectId) {
        return "org/" + orgId + "/project/" + projectId + "/settings";
    },
    deleteProjectSettings: function (orgId, projectId) {
        return "org/" + orgId + "/project/" + projectId + "/settings";
    },
    moveProject: function (orgId, projectId) {
        return "org/" + orgId + "/project/" + projectId + "/move";
    },
    addTag: function (orgId, projectId) {
        return "org/" + orgId + "/project/" + projectId + "/tags";
    },
    removeTag: function (orgId, projectId) {
        return "org/" + orgId + "/project/" + projectId + "/tags/remove";
    },
    applyAttributes: function (orgId, projectId) {
        return "org/" + orgId + "/project/" + projectId + "/attributes";
    },
    // Group
    viewGroupSettings: function (groupId) {
        return "group/" + groupId + "/settings";
    },
    updateGroupSettings: function (groupId) {
        return "group/" + groupId + "/settings";
    },
    listMembersInGroup: function (groupId) {
        return "group/" + groupId + "/members";
    },
    addMemberToOrgInGroup: function (groupId, orgId) {
        return "group/" + groupId + "/org/" + orgId + "/members";
    },
    listAllTagsInGroup: function (groupId, queryPrams) {
        return queryPrams ? "group/" + groupId + "/tags?" + getQueryString_1.default(queryPrams) : "group/" + groupId + "/tags";
    },
    deleteTagFromGroup: function (groupId) {
        return "group/" + groupId + "/tags/delete";
    },
    // Orgs
    listOrgs: function () {
        return 'orgs';
    },
    createNewOrg: function () {
        return 'orgs';
    },
    getOrgsNotiSettings: function (orgId) {
        return "org/" + orgId + "/notification-settings";
    },
    setOrgsNotiSettings: function (orgId) {
        return "org/" + orgId + "/notification-settings";
    },
    inviteUserToOrg: function (orgId) {
        return "org/" + orgId + "/invite";
    },
    listOrgMembers: function (orgId, queryParams) {
        return queryParams ? "org/" + orgId + "/members?" + getQueryString_1.default(queryParams) : "org/" + orgId + "/members";
    },
    viewOrgSettings: function (orgId) {
        return "org/" + orgId + "/settings";
    },
    updateOrgSettings: function (orgId) {
        return "org/" + orgId + "/settings";
    },
    updateMemberRole: function (orgId, userId) {
        return "org/" + orgId + "/members/" + userId;
    },
    removeMemberFromOrg: function (orgId, userId) {
        return "org/" + orgId + "/members/" + userId;
    },
    removeOrg: function (orgId) {
        return "org/" + orgId;
    },
    // Integrations
    listIntegrations: function (orgId) {
        return "org/" + orgId + "/integrations";
    },
    addNewIntegration: function (orgId) {
        return "org/" + orgId + "/integrations";
    },
    updateIntegration: function (orgId, integrationId) {
        return "org/" + orgId + "/integrations/" + integrationId;
    },
    deleteCredentials: function (orgId, integrationId) {
        return "org/" + orgId + "/integrations/" + integrationId + "/authentication";
    },
    provisionBrokerToken: function (orgId, integrationId) {
        return "org/" + orgId + "/integrations/" + integrationId + "/authentication/provision-token";
    },
    switchBrokerToken: function (orgId, integrationId) {
        return "org/" + orgId + "/integrations/" + integrationId + "/authentication/switch-token";
    },
    cloneIntegration: function (orgId, integrationId) {
        return "org/" + orgId + "/integrations/" + integrationId + "/clone";
    },
    getIntegrationByType: function (orgId, type) {
        return "org/" + orgId + "/integrations/" + type;
    },
    importProject: function (orgId, integrationId) {
        return "org/" + orgId + "/integrations/" + integrationId + "/import";
    },
    getImportJobDetails: function (orgId, integrationId, jobId) {
        return orgId + "/integrations/" + integrationId + "/import/" + jobId;
    },
    getIntegrationSettings: function (orgId, integrationId) {
        return "org/" + orgId + "/integrations/" + integrationId + "/settings";
    },
    updateIntegrationSettings: function (orgId, integrationId) {
        return "org/" + orgId + "/integrations/" + integrationId + "/settings";
    },
    listAllDependencies: function (orgId, queryParams) {
        return !!queryParams ? "org/" + orgId + "/dependencies?" + getQueryString_1.default(queryParams) : "org/" + orgId + "/dependencies";
    },
    listAllLicenses: function (orgId, queryParams) {
        return !!queryParams ? "org/" + orgId + "/licenses?" + getQueryString_1.default(queryParams) : "org/" + orgId + "/licenses";
    },
    listAllEntitlements: function (orgId) {
        return "org/" + orgId + "/entitlements";
    },
    getEntitlementValue: function (orgId, entitlementKey) {
        return "org/" + orgId + "/entitlement/" + entitlementKey;
    },
    mavenTestPublicPackage: function (groupId, artifactId, version, queryParams) {
        return !!queryParams
            ? "test/maven/" + groupId + "/" + artifactId + "/" + version + "?" + getQueryString_1.default(queryParams)
            : "test/maven/" + groupId + "/" + artifactId + "/" + version;
    },
    testMavenFile: function (queryParams) {
        return !!queryParams ? "test/maven?" + getQueryString_1.default(queryParams) : "test/maven";
    },
    testNpmPublicPackage: function (packageName, version, queryParams) {
        return !!queryParams
            ? "test/npm/" + packageName + "/" + version + "?" + getQueryString_1.default(queryParams)
            : "test/npm/" + packageName + "/" + version;
    },
    testNpmFile: function (queryParams) {
        return !!queryParams ? "test/npm?" + getQueryString_1.default(queryParams) : "test/npm";
    },
    testGopkgFile: function (queryParams) {
        return !!queryParams ? "test/golangdep?" + getQueryString_1.default(queryParams) : "test/golangdep";
    },
    testVendorFile: function (queryParams) {
        return !!queryParams ? "test/govendor?" + getQueryString_1.default(queryParams) : "test/govendor";
    },
    testYarnFile: function (queryParams) {
        return !!queryParams ? "test/yarn?" + getQueryString_1.default(queryParams) : "test/yarn";
    },
    testRubGemPublicPackage: function (gemName, version, queryParams) {
        return !!queryParams
            ? "test/rubygems/" + gemName + "/" + version + "?" + getQueryString_1.default(queryParams)
            : "test/rubygems/" + gemName + "/" + version;
    },
    testRubGemFile: function (queryParams) {
        return !!queryParams ? "test/rubygems?" + getQueryString_1.default(queryParams) : "test/rubygems";
    },
    testGradlePublicPackage: function (group, name, version, queryParams) {
        return !!queryParams
            ? "test/gradle/" + group + "/" + name + "/" + version + "?" + getQueryString_1.default(queryParams)
            : "test/gradle/" + group + "/" + name + "/" + version;
    },
    testGradleFile: function (queryParams) {
        return !!queryParams ? "test/gradle?" + getQueryString_1.default(queryParams) : "test/gradle";
    },
    testSbtPublicPackage: function (groupId, artifactId, version, queryParams) {
        return !!queryParams
            ? "test/sbt/" + groupId + "/" + artifactId + "/" + version + "?" + getQueryString_1.default(queryParams)
            : "test/sbt/" + groupId + "/" + artifactId + "/" + version;
    },
    testSbtFile: function (queryParams) {
        return !!queryParams ? "test/sbt?" + getQueryString_1.default(queryParams) : "test/sbt";
    },
    testPipPublicPackage: function (packageName, version, queryParams) {
        return !!queryParams
            ? "test/pip/" + packageName + "/" + version + "?" + getQueryString_1.default(queryParams)
            : "test/pip/" + packageName + "/" + version;
    },
    testPipFile: function (queryParams) {
        return !!queryParams ? "test/pip?" + getQueryString_1.default(queryParams) : "test/pip";
    },
    testComposerPublicPackage: function (queryParams) {
        return !!queryParams ? "test/composer?" + getQueryString_1.default(queryParams) : "test/composer";
    },
    testDepGraph: function (queryParams) {
        return !!queryParams ? "test/dep-graph?" + getQueryString_1.default(queryParams) : "test/dep-graph";
    },
    monitorDepGraph: function (queryParams) {
        return !!queryParams ? "monitor/dep-graph?" + getQueryString_1.default(queryParams) : "monitor/dep-graph";
    },
    listLatestIssues: function (queryParams) {
        return !!queryParams ? "reporting/issues/latest?" + getQueryString_1.default(queryParams) : "reporting/issues/latest";
    },
    listOfIssues: function (queryParams) {
        return !!queryParams ? "reporting/issues/?" + getQueryString_1.default(queryParams) : "v1/reporting/issues/";
    },
    getLatestIssueCounts: function (queryParams) {
        return !!queryParams
            ? "reporting/counts/issues/latest?" + getQueryString_1.default(queryParams)
            : "reporting/counts/issues/latest";
    },
    getIssueCounts: function (queryParams) {
        return !!queryParams ? "reporting/counts/issues?" + getQueryString_1.default(queryParams) : "reporting/counts/issues";
    },
    getLatestProjectCounts: function () {
        return "reporting/counts/projects/latest";
    },
    getProjectCounts: function (queryParams) {
        return "reporting/counts/projects?" + getQueryString_1.default(queryParams);
    },
    getTestCounts: function (queryParams) {
        return !!queryParams ? "reporting/counts/tests?" + getQueryString_1.default(queryParams) : "reporting/counts/tests";
    },
    getGroupLevelLogs: function (groupId, queryParams) {
        return !!queryParams ? "group/" + groupId + "/audit?" + getQueryString_1.default(queryParams) : "group/" + groupId + "/audit";
    },
    getOrgLevelLogs: function (orgId, queryParams) {
        return !!queryParams ? "org/" + orgId + "/audit?" + getQueryString_1.default(queryParams) : "org/" + orgId + "/audit";
    },
};
