import { ListDepsQueryParams, ListLicenseQueryParams, MavenTestQueryParams, NpmTestQueryParams, VendorTestQueryParams, YarnTestQueryParams, RubyGemTestQueryParams, GradleTestQueryParams, SBTTestQueryParams, PipTestQueryParams, ComposerQueryParams, TestDepGraphQueryParams, GopkgTestQueryParams, MonitorDepGraphQueryParams, ListLatestIssuesQueryParams, ListOfIssueQueryParams, LatestIssueCountQueryParams, GetIssueCountQueryParams, ProjectCountsQueryParams, GetTestCountsQueryParams, LogQueryParams } from '../../types/types';
declare const _default: {
    getUserDetails: (userId: string) => string;
    getMyDetails: string;
    getOrgNotiSettings: (orgId: string) => string;
    modOrgNotiSettings: (orgId: string) => string;
    getProjNotiSettings: (orgId: string, projectId: string) => string;
    modProjNotiSettings: (orgId: string, projectId: string) => string;
    getGroupSettings: (groupId: string) => string;
    upGroupSeetings: (groupId: string) => string;
    listGroupMembers: (groupId: string) => string;
    addMemGroupOrg: (groupId: string, orgId: string) => string;
    getGroupTags: (groupId: string, pageSize: number, pageNo: number) => string;
    getAllProjects: (orgId: string) => string;
    getSingleProject: (orgId: string, projectId: string) => string;
    updateProject: (orgId: string, projectId: string) => string;
    deleteProject: (orgId: string, projectId: string) => string;
    deactivateProject: (orgId: string, projectId: string) => string;
    activateProject: (orgId: string, projectId: string) => string;
    getAggIssues: (orgId: string, projectId: string) => string;
    getProjDepGraph: (orgId: string, projectId: string) => string;
    listAllIgnores: (orgId: string, projectId: string) => string;
    retrieveIgnore: (orgId: string, projectId: string, issueId: string) => string;
    addIgnore: (orgId: string, projectId: string, issueId: string) => string;
    replaceIgnores: (orgId: string, projectId: string, issueId: string) => string;
    deleteIgnore: (orgId: string, projectId: string, issueId: string) => string;
    listAllJiraIssues: (orgId: string, projectId: string) => string;
    createJiraIssue: (orgId: string, projectId: string, issueId: string) => string;
    listProjectSettings: (orgId: string, projectId: string) => string;
    updateProjectSettings: (orgId: string, projectId: string) => string;
    deleteProjectSettings: (orgId: string, projectId: string) => string;
    moveProject: (orgId: string, projectId: string) => string;
    addTag: (orgId: string, projectId: string) => string;
    removeTag: (orgId: string, projectId: string) => string;
    applyAttributes: (orgId: string, projectId: string) => string;
    viewGroupSettings: (groupId: string) => string;
    updateGroupSettings: (groupId: string) => string;
    listMembersInGroup: (groupId: string) => string;
    addMemberToOrgInGroup: (groupId: string, orgId: string) => string;
    listAllTagsInGroup: (groupId: string, queryPrams?: {
        perPage?: number | undefined;
        page?: number | undefined;
    } | undefined) => string;
    deleteTagFromGroup: (groupId: string) => string;
    listOrgs: () => string;
    createNewOrg: () => string;
    getOrgsNotiSettings: (orgId: string) => string;
    setOrgsNotiSettings: (orgId: string) => string;
    inviteUserToOrg: (orgId: string) => string;
    listOrgMembers: (orgId: string, queryParams: {
        includeGroupAdmins?: boolean;
    }) => string;
    viewOrgSettings: (orgId: string) => string;
    updateOrgSettings: (orgId: string) => string;
    updateMemberRole: (orgId: string, userId: string) => string;
    removeMemberFromOrg: (orgId: string, userId: string) => string;
    removeOrg: (orgId: string) => string;
    listIntegrations: (orgId: string) => string;
    addNewIntegration: (orgId: string) => string;
    updateIntegration: (orgId: string, integrationId: string) => string;
    deleteCredentials: (orgId: string, integrationId: string) => string;
    provisionBrokerToken: (orgId: string, integrationId: string) => string;
    switchBrokerToken: (orgId: string, integrationId: string) => string;
    cloneIntegration: (orgId: string, integrationId: string) => string;
    getIntegrationByType: (orgId: string, type: string) => string;
    importProject: (orgId: string, integrationId: string) => string;
    getImportJobDetails: (orgId: string, integrationId: string, jobId: string) => string;
    getIntegrationSettings: (orgId: string, integrationId: string) => string;
    updateIntegrationSettings: (orgId: string, integrationId: string) => string;
    listAllDependencies: (orgId: string, queryParams?: ListDepsQueryParams | undefined) => string;
    listAllLicenses: (orgId: string, queryParams?: ListLicenseQueryParams | undefined) => string;
    listAllEntitlements: (orgId: string) => string;
    getEntitlementValue: (orgId: string, entitlementKey: string) => string;
    mavenTestPublicPackage: (groupId: string, artifactId: string, version: string, queryParams?: MavenTestQueryParams | undefined) => string;
    testMavenFile: (queryParams?: MavenTestQueryParams | undefined) => string;
    testNpmPublicPackage: (packageName: string, version: string, queryParams?: NpmTestQueryParams | undefined) => string;
    testNpmFile: (queryParams?: NpmTestQueryParams | undefined) => string;
    testGopkgFile: (queryParams?: GopkgTestQueryParams | undefined) => string;
    testVendorFile: (queryParams?: VendorTestQueryParams | undefined) => string;
    testYarnFile: (queryParams?: YarnTestQueryParams | undefined) => string;
    testRubGemPublicPackage: (gemName: string, version: string, queryParams?: RubyGemTestQueryParams | undefined) => string;
    testRubGemFile: (queryParams?: RubyGemTestQueryParams | undefined) => string;
    testGradlePublicPackage: (group: string, name: string, version: string, queryParams?: GradleTestQueryParams | undefined) => string;
    testGradleFile: (queryParams?: GradleTestQueryParams | undefined) => string;
    testSbtPublicPackage: (groupId: string, artifactId: string, version: string, queryParams?: SBTTestQueryParams | undefined) => string;
    testSbtFile: (queryParams?: SBTTestQueryParams | undefined) => string;
    testPipPublicPackage: (packageName: string, version: string, queryParams?: PipTestQueryParams | undefined) => string;
    testPipFile: (queryParams?: PipTestQueryParams | undefined) => string;
    testComposerPublicPackage: (queryParams?: ComposerQueryParams | undefined) => string;
    testDepGraph: (queryParams?: TestDepGraphQueryParams | undefined) => string;
    monitorDepGraph: (queryParams?: MonitorDepGraphQueryParams | undefined) => string;
    listLatestIssues: (queryParams?: ListLatestIssuesQueryParams | undefined) => string;
    listOfIssues: (queryParams?: ListOfIssueQueryParams | undefined) => string;
    getLatestIssueCounts: (queryParams?: LatestIssueCountQueryParams | undefined) => string;
    getIssueCounts: (queryParams?: GetIssueCountQueryParams | undefined) => string;
    getLatestProjectCounts: () => string;
    getProjectCounts: (queryParams: ProjectCountsQueryParams) => string;
    getTestCounts: (queryParams?: GetTestCountsQueryParams | undefined) => string;
    getGroupLevelLogs: (groupId: string, queryParams?: LogQueryParams | undefined) => string;
    getOrgLevelLogs: (orgId: string, queryParams?: LogQueryParams | undefined) => string;
};
export default _default;
